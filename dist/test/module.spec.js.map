{"version":3,"file":"module.spec.js","sourceRoot":"","sources":["../../test/module.spec.ts"],"names":[],"mappings":";AAAA,MAAY,IAAI,WAAM,WAAW,CAAC,CAAA;AAElC,yBAA2B,eAAe,CAAC,CAAA;AAC3C,yBAA6B,eAAe,CAAC,CAAA;AAC7C,MAAY,MAAM,WAAM,eAAe,CAAC,CAAA;AACxC,MAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AAEnC,IAAI,CAAC,oCAAoC,EAAE,CAAC,MAAM;IAChD,IAAI,UAAU,GAAG,IAAI,mBAAU,EAAE,CAAC;IAClC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACnC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,0BAA0B,CAAC,CAAC;IAC/E,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,gCAAgC,CAAC,CAAC;IAC3F,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,gCAAgC,CAAC,CAAC;IAC3F,MAAM,CAAC,GAAG,EAAE,CAAC;AACf,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,iCAAiC,EAAE,CAAC,MAAM;IAC7C,IAAI,UAAU,GAAG,IAAI,mBAAU,EAAE,CAAC;IAClC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACnC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,0BAA0B,CAAC,CAAC;IAC/E,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,gCAAgC,CAAC,CAAC;IAC3F,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,gCAAgC,CAAC,CAAC;IAC3F,MAAM,CAAC,GAAG,EAAE,CAAC;AACf,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,qBAAqB,EAAE,CAAC,MAAM;IACjC,IAAI,UAAU,GAAG,IAAI,mBAAU,EAAE,CAAC;IAClC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,YAAY,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,mCAAmC,CAAC,CAAC;IAC1G,MAAM,CAAC,GAAG,EAAE,CAAC;AACf,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,2BAA2B,EAAE,CAAC,MAAM;IACvC,IAAI,UAAU,GAAG,IAAI,mBAAU,EAAE,CAAC;IAClC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,eAAe,EAAE,YAAY,MAAM,CAAC,YAAY,EAAE,IAAI,EAAE,iCAAiC,CAAC,CAAC;IACnH,MAAM,CAAC,GAAG,EAAE,CAAC;AACf,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,2BAA2B,EAAE,CAAC,MAAM;IACvC,IAAI,UAAU,GAAG,IAAI,mBAAU,EAAE,CAAC;IAClC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,eAAe,EAAE,YAAY,qBAAY,EAAE,IAAI,EAAE,iCAAiC,CAAC,CAAC;IAC5G,MAAM,CAAC,GAAG,EAAE,CAAC;AACf,CAAC,CAAC,CAAC","sourcesContent":["import * as test from 'blue-tape';\nimport * as sinon from 'sinon';\nimport { BaseModule } from '../src/module';\nimport { ConfigModule } from '../src/config';\nimport * as Logger from '../src/logger';\nimport * as winston from 'winston';\n\ntest('module.ts constructor with no args', (assert) => {\n  let moduleTest = new BaseModule();\n  assert.pass('run without failure');\n  assert.notEqual(moduleTest.getLogger(), undefined, 'should instatiate logger');\n  assert.notEqual(moduleTest.getLoggerModule(), undefined, 'should instatiate loggerModule');\n  assert.notEqual(moduleTest.getConfigModule(), undefined, 'should instatiate configModule');\n  assert.end();\n});\n\ntest('module.ts constructor with args', (assert) => {\n  let moduleTest = new BaseModule();\n  assert.pass('run without failure');\n  assert.notEqual(moduleTest.getLogger(), undefined, 'should instatiate logger');\n  assert.notEqual(moduleTest.getLoggerModule(), undefined, 'should instatiate loggerModule');\n  assert.notEqual(moduleTest.getConfigModule(), undefined, 'should instatiate configModule');\n  assert.end();\n});\n\ntest('module.ts getLogger', (assert) => {\n  let moduleTest = new BaseModule();\n  assert.equal(moduleTest.getLogger() instanceof winston.Logger, true, 'return instance of winston logger');\n  assert.end();\n});\n\ntest('module.ts getLoggerModule', (assert) => {\n  let moduleTest = new BaseModule();\n  assert.equal(moduleTest.getLoggerModule() instanceof Logger.LoggerModule, true, 'return instance of LoggerModule');\n  assert.end();\n});\n\ntest('module.ts getConfigModule', (assert) => {\n  let moduleTest = new BaseModule();\n  assert.equal(moduleTest.getConfigModule() instanceof ConfigModule, true, 'return instance of ConfigModule');\n  assert.end();\n});\n"]}