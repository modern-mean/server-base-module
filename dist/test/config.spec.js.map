{"version":3,"file":"config.spec.js","sourceRoot":"","sources":["../../test/config.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as test from 'blue-tape';\nimport * as sinon from 'sinon';\nimport { ConfigModule, ModuleConfig } from '../src/config';\nimport * as lodash from 'lodash';\n\ntest('config.ts constructor with no args', (assert) => {\n  let moduleTest = new ConfigModule();\n  assert.pass('run without failure');\n  assert.equal(moduleTest.get().length, 0, 'should be empty array');\n  assert.end();\n});\n\ntest('config.ts constructor with args', (assert) => {\n  let testconfig: ModuleConfig = {\n    module: 'TestModule',\n    type: 'config',\n    options: {\n      test: 'option'\n    }\n  };\n  let moduleTest = new ConfigModule(testconfig, { okie: 'dokie' }, { yes: 'sir' });\n  assert.pass('run without failure');\n  assert.equal(moduleTest.get().length, 1, 'should be array with 1 length');\n  assert.end();\n});\n\ntest('config.ts defaults', (assert) => {\n  let sandbox = sinon.sandbox.create();\n  let spy = sandbox.spy(lodash, 'defaultsDeep');\n  let testconfig: ModuleConfig = {\n    module: 'TestModule',\n    type: 'config',\n    options: {\n      test: 'option'\n    }\n  };\n  let moduleTest = new ConfigModule(testconfig);\n  moduleTest.defaults(testconfig);\n  assert.equal(spy.called, true, 'should call lodash.defaultsDeep');\n  assert.deepEqual(spy.args[0], [moduleTest.getModule('TestModule'), testconfig], 'should call lodash.defaultsDeep with arguments');\n  sandbox.restore();\n  assert.end();\n});\n\ntest('config.ts defaults', (assert) => {\n  let testconfig: ModuleConfig = {\n    module: 'TestModule',\n    type: 'config',\n    options: {\n      test: 'option'\n    }\n  };\n  let moduleTest = new ConfigModule();\n  moduleTest.defaults(testconfig);\n  assert.deepEqual(moduleTest.getModule('TestModule'), testconfig, 'push configuration to array if it doesnt exit');\n  assert.end();\n});\n\ntest('config.ts merge', (assert) => {\n  let testconfig: ModuleConfig = {\n    module: 'TestModule',\n    type: 'config',\n    options: {\n      test: 'option'\n    }\n  };\n  let moduleTest = new ConfigModule();\n  moduleTest.merge(testconfig);\n  assert.deepEqual(moduleTest.getModule('TestModule'), testconfig, 'push configuration to array if it doesnt exit');\n  assert.end();\n});\n\ntest('config.ts merge', (assert) => {\n  let sandbox = sinon.sandbox.create();\n  let spy = sandbox.spy(lodash, 'merge');\n  let testconfig: ModuleConfig = {\n    module: 'TestModule',\n    type: 'config',\n    options: {\n      test: 'option'\n    }\n  };\n  let moduleTest = new ConfigModule(testconfig);\n  moduleTest.merge(testconfig);\n  assert.equal(spy.called, true, 'should call lodash.merge');\n  assert.deepEqual(spy.args[0], [moduleTest.getModule('TestModule'), testconfig], 'should call lodash.merge with arguments');\n  sandbox.restore();\n  assert.end();\n});\n\n"]}