{"version":3,"file":"logger.spec.js","sourceRoot":"","sources":["../../test/logger.spec.ts"],"names":[],"mappings":";AAAA,MAAY,IAAI,WAAM,WAAW,CAAC,CAAA;AAElC,yBAA6B,eAAe,CAAC,CAAA;AAC7C,yBAA2C,eAAe,CAAC,CAAA;AAC3D,MAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AAEnC,IAAI,CAAC,oCAAoC,EAAE,CAAC,MAAM;IAChD,IAAI,YAAY,GAAG,IAAI,qBAAY,EAAE,CAAC;IACtC,IAAI,UAAU,GAAG,IAAI,qBAAY,CAAC,YAAY,CAAC,CAAC;IAChD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACnC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,YAAY,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,8BAA8B,CAAC,CAAC;IACrG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,oBAAoB,CAAC,CAAC;IACzE,MAAM,CAAC,KAAK,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,EAAE,CAAC,UAAU,EAAE,IAAI,EAAE,wBAAwB,CAAC,CAAC;IAC7F,MAAM,CAAC,GAAG,EAAE,CAAC;AACf,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,qDAAqD,EAAE,CAAC,MAAM;IACjE,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAChC,KAAK,EAAE,OAAO;KACf,CAAC,CAAC;IACH,IAAI,MAAM,GAAG,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IACzC,IAAI,UAAU,GAAG,IAAI,qBAAY,CAAC,GAAG,MAAM,CAAC,CAAC;IAC7C,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,iDAAiD,CAAC,CAAC;IAChG,MAAM,CAAC,GAAG,EAAE,CAAC;AACf,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,0DAA0D,EAAE,CAAC,MAAM;IAEtE,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,OAAO,CAAC;IACzC,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,GAAG,CAAC;IACvC,OAAO,CAAC,GAAG,CAAC,iBAAiB,GAAG,eAAe,CAAC;IAChD,IAAI,YAAY,GAAG,IAAI,qBAAY,EAAE,CAAC;IACtC,IAAI,UAAU,GAAG,IAAI,qBAAY,CAAC,YAAY,CAAC,CAAC;IAChD,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,6DAA6D,CAAC,CAAC;IACnH,MAAM,CAAC,KAAK,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,EAAE,CAAC,UAAU,EAAE,KAAK,EAAE,mCAAmC,CAAC,CAAC;IACzG,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,UAAU,CAAC,SAAS,EAAE,CAAC,UAAU,EAAE,IAAI,EAAE,4BAA4B,CAAC,CAAC;IAE9F,OAAO,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;IACtC,OAAO,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC;IACxC,OAAO,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;IACrC,MAAM,CAAC,GAAG,EAAE,CAAC;AACf,CAAC,CAAC,CAAC","sourcesContent":["import * as test from 'blue-tape';\nimport * as sinon from 'sinon';\nimport { LoggerModule } from '../src/logger';\nimport { ConfigModule, ModuleConfig } from '../src/config';\nimport * as winston from 'winston';\n\ntest('logger.ts constructor with no args', (assert) => {\n  let configModule = new ConfigModule();\n  let moduleTest = new LoggerModule(configModule);\n  assert.pass('run without failure');\n  assert.equal(moduleTest.getLogger() instanceof winston.Logger, true, 'instantiate winston instance');\n  assert.equal(moduleTest.getLogger().level, 'info', 'have default level');\n  assert.equal('console' in moduleTest.getLogger().transports, true, 'have console transport');\n  assert.end();\n});\n\ntest('logger.ts constructor with winston instance in args', (assert) => {\n  let logger = new (winston.Logger)({\n    level: 'silly'\n  });\n  let config = [logger, { sure: 'thing' }];\n  let moduleTest = new LoggerModule(...config);\n  assert.equal(moduleTest.getLogger(), logger, 'should set logger to the given winston instance');\n  assert.end();\n});\n\ntest('logger.ts constructor environment variable configuration', (assert) => {\n\n  process.env.LOGGERMODULE_LEVEL = 'silly';\n  process.env.LOGGERMODULE_CONSOLE = '1';\n  process.env.LOGGERMODULE_FILE = './log/all.log';\n  let configModule = new ConfigModule();\n  let moduleTest = new LoggerModule(configModule);\n  assert.equal(moduleTest.getLogger().level, 'silly', 'should configure LoggerModule based on passed configuration');\n  assert.equal('console' in moduleTest.getLogger().transports, false, 'should not have console transport');\n  assert.equal('file' in moduleTest.getLogger().transports, true, 'should have file transport');\n\n  delete process.env.LOGGERMODULE_LEVEL;\n  delete process.env.LOGGERMODULE_CONSOLE;\n  delete process.env.LOGGERMODULE_FILE;\n  assert.end();\n});\n\n"]}