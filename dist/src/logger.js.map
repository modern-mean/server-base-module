{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/logger.ts"],"names":[],"mappings":";AAAA,yBAA2C,UAAU,CAAC,CAAA;AACtD,MAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AAEnC;IAQE,YAAY,GAAG,IAAI;QAEjB,IAAI,CAAC,OAAO,CAAC,GAAG;YACd,EAAE,CAAC,CAAC,GAAG,YAAY,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;gBAClB,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,YAAY,qBAAY,CAAC,CAAC,CAAC;gBACrC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;YAC1B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAEjB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAE/G,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC9F,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC3D,CAAC;YAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACjC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK;gBAChC,UAAU,EAAE,IAAI,CAAC,UAAU;aAC5B,CAAC,CAAC;QACL,CAAC;IAEH,CAAC;IAED,SAAS;QACP,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;AAEH,CAAC;AA7CY,oBAAY,eA6CxB,CAAA;AAQD;IACE,IAAI,OAAO,GAAkB;QAC3B,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,MAAM;QAC/C,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,KAAK;QAC5C,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,KAAK,GAAG,IAAI;KACzD,CAAC;IACF,IAAI,MAAM,GAAiB;QACzB,MAAM,EAAE,cAAc;QACtB,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,OAAO;KACjB,CAAC;IACF,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAZe,2BAAmB,sBAYlC,CAAA","sourcesContent":["import { ConfigModule, ModuleConfig } from './config';\nimport * as winston from 'winston';\n\nexport class LoggerModule {\n\n  private config: ModuleConfig;\n  private configModule: ConfigModule;\n  private transports: Array<winston.TransportInstance>;\n  private logger: winston.LoggerInstance;\n\n\n  constructor(...args) {\n\n    args.forEach(arg => {\n      if (arg instanceof winston.Logger) {\n        this.logger = arg;\n        return false;\n      }\n      else if (arg instanceof ConfigModule) {\n        this.configModule = arg;\n      }\n    });\n\n    if (!this.logger) {\n\n      this.config = this.configModule.getModule('LoggerModule') || this.configModule.defaults(LoggerDefaultConfig());\n\n      this.transports = [];\n      if (this.config.options.file) {\n        this.transports.push(new (winston.transports.File)({ filename: this.config.options.file }));\n      }\n\n      if (this.config.options.console) {\n        this.transports.push(new (winston.transports.Console)());\n      }\n\n      this.logger = new (winston.Logger)({\n        level: this.config.options.level,\n        transports: this.transports\n      });\n    }\n\n  }\n\n  getLogger(): winston.LoggerInstance {\n    return this.logger;\n  }\n\n}\n\nexport interface LoggerOptions {\n  level: string\n  file: string,\n  console: boolean\n}\n\nexport function LoggerDefaultConfig() {\n  let options: LoggerOptions = {\n    level: process.env.LOGGERMODULE_LEVEL || 'info',\n    file: process.env.LOGGERMODULE_FILE || false,\n    console: process.env.LOGGERMODULE_CONSOLE ? false : true\n  };\n  let config: ModuleConfig = {\n    module: 'LoggerModule',\n    type: 'config',\n    options: options\n  };\n  return config;\n}\n"]}